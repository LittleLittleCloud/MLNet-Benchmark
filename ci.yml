# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude: 
    - u/*

stages:
- stage: RunBenchmark
  jobs:
  - job: run
    strategy:
      maxParallel: 5
      matrix:
        'Win64':
          image: 'windows-latest'
        'Ubuntu x64':
          image: 'ubuntu-latest'
        'MacOS arm64':
          image: 'macOS-13-arm64'
        'MacOS x64':
          image: 'macOS-13'
    pool:
      vmImage: $(image)
      demands: cmd
    cancelTimeoutInMinutes: 60
    steps:
    - task: UseDotNet@2
      displayName: Use .NET 6.0
      inputs:
        useGlobalJson: true
    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'
    - task: NuGetAuthenticate@1
      inputs:
        forceReinstallCredentialProvider: true
    - script: sudo apt-get update -y && sudo apt-get --assume-yes install libomp5 && sudo apt-get --assume-yes install libomp-dev
      displayName: Install libomp on Ubuntu
      condition: eq(variables['image'], 'ubuntu-latest')
    - script: brew update && brew install libomp && brew link libomp --force
      displayName: Install libomp on macOS arm64
      condition: eq(variables['image'], 'macOS-13-arm64')
    - script: export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=TRUE && brew install $(Build.SourcesDirectory)/libomp.rb --build-from-source --formula
      displayName: Install libomp on macOS x64
      condition: eq(variables['image'], 'macOS-13')
    - script: |
        cd MLNetBenchmark && cd MLNetBenchmark && dotnet run
      displayName: 'Run Benchmark on $(image)'
      condition: eq(variables['image'], 'windows-latest')
    - script: |
        cd MLNetBenchmark && cd MLNetBenchmark && dotnet run
      displayName: 'Run Benchmark on $(image)'
      condition: eq(variables['image'], 'ubuntu-latest')
    - script: |
        cd MLNetBenchmark && cd MLNetBenchmark && dotnet run
      displayName: 'Run Benchmark on $(image)'
      condition: eq(variables['image'], 'macOS-13-arm64')
    - script: |
        echo $PATH
        echo $LD_LIBRARY_PATH
        echo $DYLD_LIBRARY_PATH
        echo $Path
      displayName: 'print env path on $(image)'
      condition: eq(variables['image'], 'macOS-13')
    - script: |
        cd MLNetBenchmark
        cd MLNetBenchmark
        DYLD_PRINT_LIBRARIES=1
        DYLD_LIBRARY_PATH=/Users/runner/.local/share/ModelBuilder/torchsharp-cpu-0.99.5/bin/Release/netstandard2.0/osx-x64/:$DYLD_LIBRARY_PATH
        DYLD_FALLBACK_LIBRARY_PATH=/Users/runner/.local/share/ModelBuilder/torchsharp-cpu-0.99.5/bin/Release/netstandard2.0/osx-x64/:$DYLD_FALLBACK_LIBRARY_PATH
        ls /Users/runner/.local/share/ModelBuilder/torchsharp-cpu-0.99.5/bin/Release/netstandard2.0/osx-x64/
        dotnet run
      displayName: 'Run Benchmark on $(image)'
      condition: eq(variables['image'], 'macOS-13')

