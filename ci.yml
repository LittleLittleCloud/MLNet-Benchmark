# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude: 
    - u/*

stages:
- stage: RunBenchmark
  jobs:
  - job: run
    strategy:
      matrix:
        'Win64':
          image: 'windows-latest'
          dotnetcore: '3.1.x'
          mlnet: 'mlnet'
          artifact: 'win64'
        'Ubuntu latest':
          image: 'ubuntu-latest'
          dotnetcore: '3.1.x'
          mlnet: 'mlnet'
          artifact: 'linux'
        'MacOS Big Sur':
          image: 'macOS-11'
          mlnet: 'mlnet'
          artifact: 'macOS'
          dotnetcore: '3.1.x'
    pool:
      vmImage: $(image)
      demands: cmd
    cancelTimeoutInMinutes: 60
    steps:
    - task: UseDotNet@2
      displayName: 'install dotnet $(dotnetcore)'
      inputs:
        packageType: 'runtime'
        version: $(dotnetcore)

    - task: DotNetCoreCLI@2
      displayName: 'restore mlnet cli'
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install $(mlnet)'

    - task: DotNetCoreCLI@2
      displayName: 'run benchmark'
      inputs:
        command: 'custom'
        custom: 'msbuild'
        arguments: 'Run.proj'

    - task: CopyFiles@2
      displayName: Copy log and mbconfig to artifact
      inputs:
        Contents: |
          Output/**/*.mbconfig
          Output/**/*.txt
        TargetFolder: '$(Build.ArtifactStagingDirectory)Artifacts/$(artifact)'

    - task: PublishBuildArtifacts@1
      displayName: Upload artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)Artifacts'
        ArtifactName: 'Artifacts'
        publishLocation: 'Container'
- stage: Validation
  pool: 
    vmImage: 'windows-latest'
  dependsOn: 'RunBenchmark'
  jobs:
  - job: Validate
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'Artifacts'
        itemPattern: '**/*.mbconfig'
        path: 'Output'
    - task: DotNetCoreCLI@2
      displayName: Generate benchmark result
      inputs:
        command: 'custom'
        custom: 'msbuild'
        arguments: 'Train.proj -t:GenerateReportFile'
    - task: PublishBuildArtifacts@1
      displayName: Upload result
      inputs:
        PathtoPublish: 'result.csv'
        ArtifactName: 'result.csv'
        publishLocation: 'Container'
